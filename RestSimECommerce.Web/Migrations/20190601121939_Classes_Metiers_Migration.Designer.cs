// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestSimECommerce.Web.Data;

namespace RestSimECommerce.Web.Migrations
{
    [DbContext(typeof(RestSimECommerceContext))]
    [Migration("20190601121939_Classes_Metiers_Migration")]
    partial class Classes_Metiers_Migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RestSimECommerce.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("City");

                    b.Property<string>("Company");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomAttributes");

                    b.Property<string>("Email");

                    b.Property<string>("FaxNumber");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("PhoneNumber");

                    b.Property<int?>("StateProvinceId");

                    b.Property<string>("ZipPostalCode");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateProvinceId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("RestSimECommerce.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowCustomersToSelectPageSize");

                    b.Property<int>("CategoryTemplateId");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("HasDiscountsApplied");

                    b.Property<bool>("IncludeInTopMenu");

                    b.Property<bool>("LimitedToStores");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(400);

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(400);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int>("PageSize");

                    b.Property<string>("PageSizeOptions")
                        .HasMaxLength(200);

                    b.Property<int>("ParentCategoryId");

                    b.Property<int>("PictureId");

                    b.Property<string>("PriceRanges")
                        .HasMaxLength(400);

                    b.Property<bool>("Published");

                    b.Property<bool>("ShowOnHomePage");

                    b.Property<bool>("SubjectToAcl");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("RestSimECommerce.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowsBilling");

                    b.Property<bool>("AllowsShipping");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("LimitedToStores");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("NumericIsoCode");

                    b.Property<bool>("Published");

                    b.Property<bool>("SubjectToVat");

                    b.Property<string>("ThreeLetterIsoCode")
                        .HasMaxLength(3);

                    b.Property<string>("TwoLetterIsoCode")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("RestSimECommerce.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("CustomFormatting")
                        .HasMaxLength(50);

                    b.Property<string>("DisplayLocale")
                        .HasMaxLength(50);

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("LimitedToStores");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Published");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("RestSimECommerce.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("AdminComment");

                    b.Property<int>("AffiliateId");

                    b.Property<int?>("BillingAddressId")
                        .HasColumnName("BillingAddress_Id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CustomerGuid");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Email")
                        .HasMaxLength(1000);

                    b.Property<bool>("HasShoppingCartItems");

                    b.Property<bool>("IsSystemAccount");

                    b.Property<bool>("IsTaxExempt");

                    b.Property<DateTime>("LastActivityDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("LastIpAddress");

                    b.Property<DateTime?>("LastLoginDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Password");

                    b.Property<int>("PasswordFormatId");

                    b.Property<string>("PasswordSalt");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnName("ShippingAddress_Id");

                    b.Property<string>("SystemName")
                        .HasMaxLength(400);

                    b.Property<string>("Username")
                        .HasMaxLength(1000);

                    b.Property<int>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("RestSimECommerce.Entities.CustomerAddresses", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnName("Customer_Id");

                    b.Property<int>("AddressId")
                        .HasColumnName("Address_Id");

                    b.HasKey("CustomerId", "AddressId")
                        .HasName("PK__Customer__3C8958225C3D351E");

                    b.HasIndex("AddressId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("RestSimECommerce.Entities.CustomerCustomerRoleMapping", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnName("Customer_Id");

                    b.Property<int>("CustomerRoleId")
                        .HasColumnName("CustomerRole_Id");

                    b.HasKey("CustomerId", "CustomerRoleId")
                        .HasName("PK__Customer__ABACF0F7A4893616");

                    b.HasIndex("CustomerRoleId");

                    b.ToTable("Customer_CustomerRole_Mapping");
                });

            modelBuilder.Entity("RestSimECommerce.Entities.CustomerRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<bool>("FreeShipping");

                    b.Property<bool>("IsSystemRole");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("PurchasedWithProductId");

                    b.Property<string>("SystemName")
                        .HasMaxLength(255);

                    b.Property<bool>("TaxExempt");

                    b.HasKey("Id");

                    b.ToTable("CustomerRole");
                });

            modelBuilder.Entity("RestSimECommerce.Entities.EmailAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("EnableSsl");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("Port");

                    b.Property<bool>("UseDefaultCredentials");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("EmailAccount");
                });

            modelBuilder.Entity("RestSimECommerce.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DefaultCurrencyId");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("FlagImageFileName")
                        .HasMaxLength(50);

                    b.Property<string>("LanguageCulture")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("LimitedToStores");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Published");

                    b.Property<bool>("Rtl");

                    b.Property<string>("UniqueSeoCode")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("RestSimECommerce.Entities.LocaleStringResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ResourceValue")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("LocaleStringResource");
                });

            modelBuilder.Entity("RestSimECommerce.Entities.LocalizedProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId");

                    b.Property<int>("LanguageId");

                    b.Property<string>("LocaleKey")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("LocaleKeyGroup")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("LocaleValue")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("LocalizedProperty");
                });

            modelBuilder.Entity("RestSimECommerce.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillingAddressId");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId");

                    b.Property<bool>("Deleted");

                    b.Property<Guid>("OrderGuid");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int?>("ShippingAddressId");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("RestSimECommerce.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeDescription");

                    b.Property<int>("OrderId");

                    b.Property<Guid>("OrderItemGuid");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("UnitPriceInclTax")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("RestSimECommerce.Entities.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltAttribute");

                    b.Property<bool>("IsNew");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<byte[]>("PictureBinary");

                    b.Property<string>("SeoFilename")
                        .HasMaxLength(300);

                    b.Property<string>("TitleAttribute");

                    b.HasKey("Id");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("RestSimECommerce.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminComment");

                    b.Property<DateTime?>("AvailableEndDateTimeUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("AvailableStartDateTimeUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted");

                    b.Property<bool>("DisableBuyButton");

                    b.Property<bool>("DisableWishlistButton");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("DisplayStockAvailability");

                    b.Property<bool>("DisplayStockQuantity");

                    b.Property<string>("FullDescription");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<bool>("IsRental");

                    b.Property<bool>("IsTaxExempt");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(400);

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(400);

                    b.Property<int>("MinStockQuantity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("OrderMaximumQuantity");

                    b.Property<int>("OrderMinimumQuantity");

                    b.Property<int>("ParentGroupedProductId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("ProductTemplateId");

                    b.Property<int>("ProductTypeId");

                    b.Property<bool>("Published");

                    b.Property<int>("RentalPriceLength");

                    b.Property<int>("RentalPricePeriodId");

                    b.Property<string>("ShortDescription");

                    b.Property<bool>("ShowOnHomePage");

                    b.Property<decimal?>("SpecialPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime?>("SpecialPriceEndDateTimeUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SpecialPriceStartDateTimeUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("StockQuantity");

                    b.Property<int>("TaxCategoryId");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<bool>("VisibleIndividually");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("RestSimECommerce.Entities.ProductCategoryMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsFeaturedProduct");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_Category_Mapping");
                });

            modelBuilder.Entity("RestSimECommerce.Entities.ProductPictureMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<int>("PictureId");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("PictureId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_Picture_Mapping");
                });

            modelBuilder.Entity("RestSimECommerce.Entities.StateProvince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(100);

                    b.Property<int>("CountryId");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Published");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("StateProvince");
                });

            modelBuilder.Entity("RestSimECommerce.Web.Areas.Identity.Data.RestSimEComWebUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("DOB");

                    b.Property<string>("Name");

                    b.HasDiscriminator().HasValue("RestSimEComWebUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RestSimECommerce.Entities.Address", b =>
                {
                    b.HasOne("RestSimECommerce.Entities.Country", "Country")
                        .WithMany("Address")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("Address_Country");

                    b.HasOne("RestSimECommerce.Entities.StateProvince", "StateProvince")
                        .WithMany("Address")
                        .HasForeignKey("StateProvinceId")
                        .HasConstraintName("Address_StateProvince");
                });

            modelBuilder.Entity("RestSimECommerce.Entities.Customer", b =>
                {
                    b.HasOne("RestSimECommerce.Entities.Address", "BillingAddress")
                        .WithMany("CustomerBillingAddress")
                        .HasForeignKey("BillingAddressId")
                        .HasConstraintName("Customer_BillingAddress");

                    b.HasOne("RestSimECommerce.Entities.Address", "ShippingAddress")
                        .WithMany("CustomerShippingAddress")
                        .HasForeignKey("ShippingAddressId")
                        .HasConstraintName("Customer_ShippingAddress");
                });

            modelBuilder.Entity("RestSimECommerce.Entities.CustomerAddresses", b =>
                {
                    b.HasOne("RestSimECommerce.Entities.Address", "Address")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("Customer_Addresses_Target")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RestSimECommerce.Entities.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("Customer_Addresses_Source")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RestSimECommerce.Entities.CustomerCustomerRoleMapping", b =>
                {
                    b.HasOne("RestSimECommerce.Entities.Customer", "Customer")
                        .WithMany("CustomerCustomerRoleMapping")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("Customer_CustomerRoles_Source")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RestSimECommerce.Entities.CustomerRole", "CustomerRole")
                        .WithMany("CustomerCustomerRoleMapping")
                        .HasForeignKey("CustomerRoleId")
                        .HasConstraintName("Customer_CustomerRoles_Target")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RestSimECommerce.Entities.LocaleStringResource", b =>
                {
                    b.HasOne("RestSimECommerce.Entities.Language", "Language")
                        .WithMany("LocaleStringResource")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("LocaleStringResource_Language")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RestSimECommerce.Entities.LocalizedProperty", b =>
                {
                    b.HasOne("RestSimECommerce.Entities.Language", "Language")
                        .WithMany("LocalizedProperty")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("LocalizedProperty_Language")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RestSimECommerce.Entities.Order", b =>
                {
                    b.HasOne("RestSimECommerce.Entities.Address", "BillingAddress")
                        .WithMany("OrderBillingAddress")
                        .HasForeignKey("BillingAddressId")
                        .HasConstraintName("Order_BillingAddress");

                    b.HasOne("RestSimECommerce.Entities.Customer", "Customer")
                        .WithMany("Order")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("Order_Customer")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RestSimECommerce.Entities.Address", "ShippingAddress")
                        .WithMany("OrderShippingAddress")
                        .HasForeignKey("ShippingAddressId")
                        .HasConstraintName("Order_ShippingAddress");
                });

            modelBuilder.Entity("RestSimECommerce.Entities.OrderItem", b =>
                {
                    b.HasOne("RestSimECommerce.Entities.Order", "Order")
                        .WithMany("OrderItem")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("OrderItem_Order")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RestSimECommerce.Entities.Product", "Product")
                        .WithMany("OrderItem")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("OrderItem_Product")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RestSimECommerce.Entities.ProductCategoryMapping", b =>
                {
                    b.HasOne("RestSimECommerce.Entities.Category", "Category")
                        .WithMany("ProductCategoryMapping")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("ProductCategory_Category")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RestSimECommerce.Entities.Product", "Product")
                        .WithMany("ProductCategoryMapping")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("ProductCategory_Product")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RestSimECommerce.Entities.ProductPictureMapping", b =>
                {
                    b.HasOne("RestSimECommerce.Entities.Picture", "Picture")
                        .WithMany("ProductPictureMapping")
                        .HasForeignKey("PictureId")
                        .HasConstraintName("ProductPicture_Picture")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RestSimECommerce.Entities.Product", "Product")
                        .WithMany("ProductPictureMapping")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("ProductPicture_Product")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RestSimECommerce.Entities.StateProvince", b =>
                {
                    b.HasOne("RestSimECommerce.Entities.Country", "Country")
                        .WithMany("StateProvince")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("StateProvince_Country")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
